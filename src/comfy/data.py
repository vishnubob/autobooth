"""
This module contains classes to retrieve data from the server
Including the history of a prompt and the images generated by a prompt

"""

import PIL
from PIL import Image
import io
import urllib.parse
import urllib.request


class NodeTree:
    """NodeTree class is a simple class to find nodes in a tree"""

    @staticmethod
    def find_output_node(payload) -> str | None:
        """This method is used to find the node containing the SaveImage class in a prompt"""
        for key, value in payload.items():
            if not isinstance(value, dict): continue

            if value.get("class_type") == "SaveImage":
                return f"['{key}']"  # Return the key containing the SaveImage class
            result = NodeTree.find_output_node(value)
            if result:
                return result
        return None


class History:
    def __init__(self, server_address: str, prompt_id: str):
        self.server_address = server_address
        self.prompt_id = prompt_id

    def get(self) -> dict:
        """This method is used to retrieve the history of a prompt"""
        import urllib.request
        import json

        with urllib.request.urlopen(f"{self.server_address}/history/{self.prompt_id}") as response:
            d = json.loads(response.read())
            return d[self.prompt_id]

    def get_images(self, payload) -> list[Image]:
        images = []
        history = self.get()
        node_image = NodeTree.find_output_node(payload)
        filenames = history.get('outputs').get(node_image).get('images')  # Extract all images

        for img_info in filenames:
            filename = img_info['filename']
            subfolder = img_info['subfolder']
            folder_type = img_info['type']
            image_data = self.get_image(filename, subfolder, folder_type)
            image_file = io.BytesIO(image_data)  # Convert the image data to a file
            image = Image.open(image_file)
            images.append(image)
        return images

    def get_image(self, filename, subfolder, folder_type) -> bytes:
        """This method is used to retrieve an image from history"""
        data = {"filename": filename, "subfolder": subfolder, "type": folder_type}
        url_values = urllib.parse.urlencode(data)
        with urllib.request.urlopen(f"{self.server_address}/view?{url_values}") as response:
            return response.read()

    def get_latest_image(self, payload) -> Image:
        """This method is used to retrieve the latest image from history"""
        images = self.get_images(payload)
        return images[-1] if len(images) > 0 else None

    def save_latest_image(self, payload, path) -> str:
        """This method is used to save the latest image from history"""
        image = self.get_latest_image(payload)
        image.save(path)

        return path
